#!/usr/bin/env bash

adapterInfo="$(acpi -a)"
batteryInfo="$(acpi -b)"

### Mouse click action:
## [1-2]: show status/info notification.
## [3-6]: temporarily simulate charge level (for custom colors testing).
case ${BLOCK_BUTTON} in
[1-2]) notify-send "${adapterInfo}"$'\n'"${batteryInfo}" ;;
[3-6]) adapterInfo=$(dmenu -l 2 < <(for i in 'Power Adapter: on-line' 'Power Adapter: off-line' ; do echo ${i}; done)) && Charge=$(dmenu -l 10 < <(for i in {0..100} ; do echo ${i}; done))
esac

### Defaults
[[ "${adapterInfo##*\:\ }" == "on-line" ]] && adapterState=1 || adapterState=0
batteryState="${batteryInfo##*\:\ }" && batteryState="${batteryState%%\,*}"
Charge="${Charge:-${batteryInfo#*\,\ }}" && Charge="${Charge%%\%*}"

### .gif creation (uncomment, and then run the "Exhibition.sh" script)
# read adapterState Charge < <(cat ~/.config/i3blocks/scripts/Battery.txt)

Blox[0]="□"
Blox[1]="■"

[[ -n ${baseColors[@]} && ${#baseColors[@]} -ge 5 ]] ||
	baseColors=( '141821' 'F92772' 'FB666B' 'C38933' 'A9B93F' '66B333' '459939' '33BE3F' '21AF66' '00FBBF' '45DFED' )

_Diff() { echo $((${1}>=${2:-${1}}?(${1}-${2:-${1}}):(${2:-${1}}-${1}))); }
_Dec_RGB() {
	printf '%02d\n' "0x${1::2}"
	printf '%02d\n' "0x${1:2:2}"
	printf '%02d\n' "0x${1:4}"
}
_Criments() {
	echo "${1}"
	DIF=$(_Diff ${1} ${2})
	for ((n=1;n<=${3:-${CRIMENT}};n++)); do
		(( Tranz = DIF != 0 ? (( ${2} > ${1} ? (${1} + ((DIF / ${3:-${CRIMENT}}) * n)) : (${1} - ((DIF / ${3:-${CRIMENT}}) * n)) )) : ${1} ))
		echo $(( Tranz < 0 ? (Tranz + 256) : (( Tranz < 256 ? Tranz : (Tranz - 256) )) ))
	done
	echo "${2}"
}
_MidPoint() {
	[[ -z ${MID} ]] || unset MID[*]
	Lower=( $(_Dec_RGB "${1/\#/}") )
	Upper=( $(_Dec_RGB "${2/\#/}") )
	for ((n=0;n<${#Lower[@]};n++)); do
		DIF=$(_Diff ${Lower[n]} ${Upper[n]})
		(( Tranz = DIF != 0 ? (( ${Upper[n]} > ${Lower[n]} ? (${Lower[n]} + (DIF / 2)) : (${Lower[n]} - (DIF / 2)) )) : ${Lower[n]} ))
		(( Tranz = Tranz < 0 ? (Tranz + 256) : (( Tranz < 256 ? Tranz : (Tranz - 256) )) ))
		MID[${#MID[@]}]="$(printf '%02x' ${Tranz})"
	done
	echo "${MID[0]}${MID[1]}${MID[2]}"
}

## Set Palette[1] to corespond with the battery's current charge-level.
if [[ ${Charge} == 0 ]]; then
	Palette[1]="#${baseColors[0]}"
elif [[ ${Charge} == 100 ]]; then
	Palette[1]="#${baseColors[-1]}"
else
	if [[ $(( 100 % (${#baseColors[@]} - 1) )) != 0 ]]; then
		(( CRIMENT = 100 / (${#baseColors[@]} - 2) ))
	else
		(( CRIMENT = 100 / (${#baseColors[@]} - 1) ))
	fi
	(( SECT = Charge / CRIMENT ))
	(( IND = Charge % CRIMENT ))
	lowerBound=( $(_Dec_RGB "${baseColors[SECT]}") )
	upperBound=( $(_Dec_RGB "${baseColors[SECT+1]}") )
	R=( $(_Criments "${lowerBound[0]}" "${upperBound[0]}" ${CRIMENT}) )
	G=( $(_Criments "${lowerBound[1]}" "${upperBound[1]}" ${CRIMENT}) )
	B=( $(_Criments "${lowerBound[2]}" "${upperBound[2]}" ${CRIMENT}) )
	[[ ${IND} -ge ${#R[@]} ]] && Palette[1]=\#"$(printf '%02x' ${R[-1]} ${G[-1]} ${B[-1]})" || Palette[1]=\#"$(printf '%02x' ${R[IND]} ${G[IND]} ${B[IND]})"
fi

## set statLabel and Palette[0] according to the current state of the power adapter (plugged/unplugged).
if [[ ${adapterState} == 1 ]]; then
	statLabel=" " && Palette[0]='#663399'
else
	statLabel="⚡ " && Palette[0]='#393633'
fi

## set Palette[2] to be the midpoint of Palette[0] and Palette[1].
Palette[2]=\#"$(_MidPoint "${Palette[0]}" "${Palette[1]}")"

## determine number of charged cells to display.
(( fullCells = Charge / 20 ))
FULL="$(printf '%*s' ${fullCells})"
FULL="<span foreground=\"${Palette[1]}\" size=\"small\">${FULL//\ /${Blox[1]}}</span>"

## determine number of drained and/or transient cells, and set each of them respective to the other.
(( emptCells = 5 - fullCells ))
(( Transience = ( Charge % 20 ) / 10 ))
if [[ ${Transience} == 1 ]]; then
	((emptCells = Charge > 79 ? ((Charge < 90 ? 1 : (emptCells - 1))) : (emptCells - 1) ))
	TRANS="<span foreground=\"${Palette[2]}\" size=\"x-small\"><sup>${Blox[1]}</sup></span>"
fi
if [[ ${emptCells} -gt 0 ]]; then
	EMPT="$(printf '%*s' ${emptCells})"
	EMPT="<span foreground=\"${Palette[$((Charge<10?((adapterState==0?1:0)):0))]}\" size=\"small\">${EMPT//\ /${Blox[0]}}</span>"
fi

### set Palette[3] to be the _midPoint of Palette[0] and Palette[2];
###   for coloring the ${statLabel} (Bracket[0]) and indicator "frame" ${Bracket[{1,2}]}.
Palette[3]=\#"$(_MidPoint "${Palette[0]}" "${Palette[2]}")"
Bracket[0]="<span foreground=\"${Palette[$((Charge<=99?3:1))]}\" size=\"medium\">${statLabel}</span>"
Bracket[1]="<span foreground=\"${Palette[3]}\" size=\"medium\">[</span>"
Bracket[2]="<span foreground=\"${Palette[3]}\" size=\"medium\">]</span>"

### Generate output ${message} ###
message="${Bracket[0]}${Bracket[1]}"
[[ -z ${FULL} ]] || message+="${FULL}"
[[ -z ${TRANS} ]] || message+="${TRANS}"
[[ -z ${EMPT} ]] || message+="${EMPT}"
message+="${Bracket[2]}"
echo "${message} "
